{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Valk's note","text":"<p>\u4f60\u597d\uff0c\u6211\u662f\u6d59\u6c5f\u5927\u5b6623\u7ea7\u5b66\u751f\uff0c\u4e3b\u4fee\u8f6f\u4ef6\u5de5\u7a0b\uff0c\u8f85\u4fee\u7afa\u53ef\u6862\u5b66\u9662\u5de5\u7a0b\u6559\u80b2\u9ad8\u7ea7\u73ed\u3002\u6211\u4f1a\u5728\u8fd9\u91cc\u653e\u4e00\u4e9b\u7b14\u8bb0\u548c\u968f\u7b14\uff0c\u8bf7\u591a\u591a\u6307\u6559\u3002</p>"},{"location":"latest/","title":"\u6700\u8fd1","text":""},{"location":"latest/#_1","title":"\u5e73\u65f6\u4f5c\u4e1a","text":"<ul> <li>\u6982\u7edf9 5.10</li> <li> <p>\u79bb\u656311 5.10</p> </li> <li> <p>\u5927\u726911 5.13</p> </li> <li>VJF11 5.14</li> <li>FDS11 5.14</li> <li>\u6982\u7edf11 5.17</li> <li> <p>\u79bb\u656312 5.17</p> </li> <li> <p>\u5927\u726912 5.20</p> </li> <li>VJF12 5.21</li> <li>FDS12 5.21</li> <li>\u6982\u7edf12 5.24</li> <li> <p>\u79bb\u656313 5.24</p> </li> <li> <p>\u5927\u726913 5.27</p> </li> <li>VJF13 5.28</li> <li>FDS13 5.28</li> <li>\u6982\u7edf13 5.31</li> <li>\u79bb\u656314 5.31</li> </ul>"},{"location":"latest/#_2","title":"\u5927\u4f5c\u4e1a","text":"<ul> <li>\u53f2\u7eb2\u5c55\u793a 5.9</li> <li>FDS\u4e92\u8bc4 5.10</li> <li>FDS\u6700\u7ec8\u63d0\u4ea4 5.12</li> <li>\u53e3\u8ff0\u53f2 5.16</li> <li>\u53f2\u7eb2\u5c55\u793a\u62a5\u544a 6.13</li> <li>\u6982\u7edf\u8ba8\u8bba 6.16</li> <li>\u519b\u7406\u8bba\u6587 6.16</li> <li>\u521b\u4e1a\u542f\u7a0b\u7ebf\u4e0a 6.17</li> <li>\u521b\u4e1a\u542f\u7a0b\u542c\u540e\u611f 6.17</li> <li>FDS bonus 6.18</li> </ul>"},{"location":"test/","title":"Hei!!","text":"<p>I'd like to have s test. This is really awesome! Have some change. \\(a_i=b^3\\) Do you have </p> <p>\\(m_k+33=z\\)</p> <p>? \u6765\u70b9\u4e2d\u6587 Go</p> C++<pre><code>double total_distance(const vector&lt;int&gt;&amp; path)                  //total_distance\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u67d0\u6761\u8def\u5f84\u7684\u957f\u5ea6\n{\n    double total=0;\n    int i;\n    for(i=0;i&lt;path.size()-1;i++)\n        total+=city_distance[path[i]][path[i+1]];               //\u4ecepath\u4e2d\u53d6\u51fa\u5f53\u524d\u57ce\u5e02\u548c\u4e0b\u4e00\u4e2a\u57ce\u5e02\uff0c\u5229\u7528city_distance\u67e5\u8be2\u8ddd\u79bb\n    total+=city_distance[path[i]][path[0]];                     //\u56de\u5230\u8d77\u70b9\n    return total;\n}\n</code></pre>"},{"location":"CS/C/none/","title":"nothing","text":"<p>@import \"docs\\wallhaven-d6o77l.jpg\"</p> <p></p> <p>Download PDF</p>"},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/8/","title":"\u4e00\u4e9b\u9700\u8981\u8bb0\u7684\u5b9a\u7406","text":""},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/8/#c5","title":"C5 \u6811","text":"<ul> <li>\u666e\u901a\u6811\u8f6c\u4e3a\u4e8c\u53c9\u6811\uff0c\u5176\u5b9e\u662f\u5c06\u6570\u7684\u7ed3\u6784\u5b9a\u4e49\u4e3aFirstChild-NextSibling\u7684\u5f62\u5f0f\u3002\u5728\u8fd9\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u666e\u901a\u6811\u7684\u540e\u5e8f\u904d\u5386\u5c31\u662f\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\u3002  postorder of T: <code>KLEFBGCMHIJDA</code>    inorder of BT: <code>KLEFBGCMHIJDA</code></li> <li>\u7ebf\u7d22\u4e8c\u53c9\u6811\u7528\u7a7a\u7684\u5de6\u8282\u70b9\u8bb0\u5f55\u524d\u9a71\uff0c\u7a7a\u7684\u53f3\u8282\u70b9\u8bb0\u5f55\u540e\u7ee7\uff0c\u6709\u6548\u5730\u8282\u7701\u4e86\u7a7a\u95f4\u3002\u524d\u9a71\u4e0e\u540e\u7ee7\u7531\u904d\u5386\u65b9\u5f0f\u51b3\u5b9a\u3002\u5982\u56fe\u4e2d\u7684\u7ebf\u7d22\u4e8c\u53c9\u6811\u91c7\u53d6\u4e2d\u5e8f\u904d\u5386\u3002 </li> </ul>"},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/8/#c6","title":"C6 \u4e8c\u53c9\u6811\uff0c\u4e8c\u53c9\u641c\u7d22\u6811","text":"<ul> <li>\u63d2\u5165(insert)\uff1a\u82e5\u4e3a\u7a7a\u6811\uff0c\u5219\u76f4\u63a5\u521b\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u5426\u5219\u5219\u4e00\u76f4\u4e0e\u5f53\u524d\u8282\u70b9\u6bd4\u8f83\uff0c\u82e5\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3a\u7a7a\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u3002 C<pre><code>SearchTree  Insert( ElementType X, SearchTree T ) \n{ \n    if ( T == NULL ) \n    { /* Create and return a one-node tree */ \n    T = malloc( sizeof( struct TreeNode ) ); \n    if ( T == NULL ) \n       FatalError( \"Out of space!!!\" ); \n    else { \n       T-&gt;Element = X; \n       T-&gt;Left = T-&gt;Right = NULL; } \n    }  \n    else  /* If there is a tree */\n    if ( X &lt; T-&gt;Element ) \n       T-&gt;Left = Insert( X, T-&gt;Left ); \n    else \n       if ( X &gt; T-&gt;Element ) \n          T-&gt;Right = Insert( X, T-&gt;Right ); \n       /* Else X is in the tree already; we'll do nothing */ \n    return  T;  \n}\n</code></pre></li> <li>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5143\u7d20\u96c6\uff0c\u5176\u6784\u5efa\u51fa\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5f62\u72b6\u53d6\u51b3\u4e8e\u63d2\u5165\u5143\u7d20\u7684\u987a\u5e8f\u3002</li> <li>\u5220\u9664(delete)\uff1a\u5f53\u6211\u4eec\u8981\u5220\u9664\u4e00\u4e2a\u8282\u70b9<ul> <li>\u5982\u679c\u5176\u5ea6\u4e3a0\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5220\u53bb\u8fd9\u4e2a\u8282\u70b9\uff1b</li> <li>\u5982\u679c\u5176\u5ea6\u4e3a1\uff0c\u6211\u4eec\u7528\u5176\u552f\u4e00\u7684\u5b50\u8282\u70b9\u8986\u76d6\u5f53\u524d\u8282\u70b9\uff1b</li> <li>\u5982\u679c\u5176\u5ea6\u4e3a2\uff0c\u6211\u4eec\u4e00\u822c\u6709\u4e24\u79cd\u9009\u62e9\uff1a<ol> <li>\u4ece\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b50\u6811\u9009\u62e9\u4e00\u4e2a\u6700\u5927\u7684\u653e\u5728\u5f53\u524d\u8282\u70b9</li> <li>\u4ece\u5f53\u524d\u8282\u70b9\u7684\u53f3\u5b50\u6811\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u653e\u5728\u5f53\u524d\u8282\u70b9 \u5176\u4e2d\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u6211\u4eec\u9009\u62e9\u7684\u8282\u70b9\u7684\u5ea6\u6700\u591a\u662f1\uff0c\u8fd9\u4f7f\u5f97\u5220\u9664\u64cd\u4f5c\u662f\u6709\u7a77\u7684\u3002 </li> </ol> </li> </ul> </li> <li>C<pre><code>SearchTree  Delete( ElementType X, SearchTree T ) \n{    Position  TmpCell; \n      if ( T == NULL )   Error( \"Element not found\" ); \n      else  if ( X &lt; T-&gt;Element )  /* Go left */ \n        T-&gt;Left = Delete( X, T-&gt;Left ); \n               else  if ( X &gt; T-&gt;Element )  /* Go right */ \n               T-&gt;Right = Delete( X, T-&gt;Right ); \n             else  /* Found element to be deleted */ \n               if ( T-&gt;Left &amp;&amp; T-&gt;Right ) {  /* Two children */ \n                   /* Replace with smallest in right subtree */ \n                   TmpCell = FindMin( T-&gt;Right ); \n                   T-&gt;Element = TmpCell-&gt;Element; \n                   T-&gt;Right = Delete( T-&gt;Element, T-&gt;Right );  } /* End if */\n               else {  /* One or zero child */ \n                   TmpCell = T; \n                   if ( T-&gt;Left == NULL ) /* Also handles 0 child */ \n                 T = T-&gt;Right; \n                   else  if ( T-&gt;Right == NULL )  T = T-&gt;Left; \n                   free( TmpCell );  } \n      return  T; \n}\n</code></pre></li> <li>\u61d2\u60f0\u5220\u9664(lazy delete)\uff1a\u5bf9\u4e8e\u5220\u9664\u6b21\u6570\u4e0d\u662f\u5f88\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u5b9e\u9645\u91ca\u653e\u4e00\u4e2a\u8282\u70b9\u7684\u5185\u5b58\uff0c\u800c\u662f\u589e\u52a0\u4e00\u4e2a\u5e03\u5c14\u53d8\u91cf\u6765\u8868\u793a\u5f53\u524d\u8282\u70b9\u662f\u5426\u88ab\u5220\u9664\u3002\u6211\u4eec\u53ef\u4ee5\u6807\u8bb0\u88ab\u5220\u9664\u7684\u8282\u70b9\uff0c\u5728\u8fdb\u884c\u904d\u5386\u7b49\u64cd\u4f5c\u65f6\u8df3\u8fc7\u8be5\u8282\u70b9\u3002\u5f53\u6211\u4eec\u8981\u91cd\u65b0\u63d2\u5165\u5f53\u524d\u5143\u7d20\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u91cd\u65b0\u5206\u914d\u5185\u5b58\uff0c\u800c\u662f\u76f4\u63a5\u4fee\u6539\u5e03\u5c14\u53d8\u91cf\u3002 \u61d2\u60f0\u5220\u9664\u9002\u7528\u4e8e\u5220\u9664\u6b21\u6570\u4e0d\u90a3\u4e48\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u88ab\u6807\u8bb0\u5220\u9664\u7684\u8282\u70b9\u8fc7\u591a\uff08\u8d85\u8fc7\u4e00\u534a\uff09\uff0c\u4f1a\u5bfc\u81f4\u5176\u4ed6\u64cd\u4f5c\u7684\u8868\u73b0\u5f88\u7cdf\u7cd5\u3002</li> <li>\u6298\u534a\u67e5\u627e\u6811(decision tree)\uff1a\u6298\u534a\u67e5\u627e\u6811\u5176\u5b9e\u662f\u6839\u636e\u4e8c\u5206\u67e5\u627e\u7684\u89c4\u5219\u5b9a\u4e49\u5728\u4e8c\u53c9\u641c\u7d22\u6811\u4e0a\u3002\u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u6839\u636e\u4e2d\u5e8f\u904d\u5386\u5c06\u6bcf\u4e2a\u8282\u70b9\u4ece1\u5f00\u59cb\u7f16\u53f7\uff0c\u4ee5\u6700\u5927\u7f16\u53f7\u4e0e\u6700\u5c0f\u7f16\u53f7\u7684\u548c\u9664\u4ee52\u4f5c\u4e3a\u4e2d\u503c\\(mid\\)\u3002\u5176\u4e2d\uff0c\u5bf9\u4e8e\u548c\u4e3a\u5947\u6570\u7684\u60c5\u51b5\uff0c\u9664\u4ee52\u6d89\u53ca\u5230\u53d6\u6574\u95ee\u9898\uff0c\u5728\u4e00\u9897\u6298\u534a\u67e5\u627e\u6811\u4e2d\uff0c\u53d6\u6574\u65b9\u5f0f\u662f\u7edf\u4e00\u7684\u3002</li> <li>\u4f8b\u9898  \u7f16\u53f7\u540e\u6709  \u5bf9\u4e8eB\uff1a4 5\uff0c7 8 \u4e0d\u7b26\u3002  \u5bf9\u4e8eC\uff1a3 4\uff0c6 7 \u4e0d\u7b26\u3002  \u5bf9\u4e8eD\uff1a9 10\uff0c1 10 \u4e0d\u7b26</li> </ul>"},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/8/#c7","title":"C7 \u5806","text":"<ul> <li>\u63d2\u5165(insert)\uff1a\u7531\u4e8e\u5806\u662f\u4e00\u68f5\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u5411\u5806\u4e2d\u63d2\u5165\u5143\u7d20\u53ea\u6709\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5047\u8bbe\u8fd9\u91cc\u6211\u4eec\u7684\u5806\u662f\u6700\u5c0f\u5806\u3002\u5c06\u8be5\u5143\u7d20\u653e\u5728\u8fd9\u4e2a\u552f\u4e00\u4f4d\u7f6e\u4e0a\u540e\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5c06\u5143\u7d20\u4e0e\u5176\u7236\u8282\u70b9\u6bd4\u8f83\uff0c\u82e5\u7236\u8282\u70b9\u8f83\u5927\uff0c\u5219\u5c06\u7236\u8282\u70b9\u4e0b\u79fb\u3002\u82e5\u7236\u8282\u70b9\u8f83\u5c0f\uff0c\u5219\u8bf4\u660e\u627e\u5230\u4e86\u5f53\u524d\u5143\u7d20\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u5373\u5b8c\u6210\u4e86\u4e00\u6b21percolate up\u3002 C<pre><code>/* H-&gt;Element[ 0 ] is a sentinel */ \nvoid  Insert( ElementType  X,  PriorityQueue  H ) \n{ \n    int  i; \n    if ( IsFull( H ) ) { \n    Error( \"Priority queue is full\" ); \n    return; \n    } \n    for ( i = ++H-&gt;Size; H-&gt;Elements[ i / 2 ] &gt; X; i /= 2 ) \n    H-&gt;Elements[ i ] = H-&gt;Elements[ i / 2 ]; \n\n    H-&gt;Elements[ i ] = X; \n}\n</code></pre> \u8fd9\u6bb5\u4f8b\u7a0b\u4e2d\uff0c<code>H-&gt;Element[0]</code>\u88ab\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u5c0f\u4e8e\u5806\u4e2d\u6700\u5c0f\u6570\u7684\u4e00\u4e2a\u6570\uff0c\u4ee5\u4f7f\u67d0\u4e2a\u5f88\u5c0f\u7684\u6570\u5230\u4e86\u5806\u9876\u80fd\u591f\u505c\u4e0b\u3002</li> <li>\u5220\u9664\u5806\u9876(delete min)\uff1a\u5f53\u6211\u4eec\u9700\u8981\u5220\u9664\u5806\u9876\u5143\u7d20\u65f6\uff0c\u6211\u4eec\u4e00\u822c\u7528\u5806\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u66ff\u6362\u5806\u9876\u7684\u5143\u7d20\uff0c\u518d\u5c06\u8be5\u5143\u7d20\u4e0e\u5176\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\u6bd4\u8f83\uff0c\u7528\u66f4\u5c0f\u7684\u90a3\u4e2a\u5b69\u5b50\u8282\u70b9\u66ff\u6362\u5b83\uff0c\u4ee5\u6b64\u4e00\u6b65\u6b65percolate down\u3002 C<pre><code>ElementType  DeleteMin( PriorityQueue  H ) \n{ \n    int  i, Child; \n    ElementType  MinElement, LastElement; \n    if ( IsEmpty( H ) ) { \n         Error( \"Priority queue is empty\" ); \n         return  H-&gt;Elements[ 0 ];   } \n    MinElement = H-&gt;Elements[ 1 ];  /* save the min element */\n    LastElement = H-&gt;Elements[ H-&gt;Size-- ];  /* take last and reset size */\n    for ( i = 1; i * 2 &lt;= H-&gt;Size; i = Child ) {  /* Find smaller child */ \n         Child = i * 2; \n         if (Child != H-&gt;Size &amp;&amp; H-&gt;Elements[Child+1] &lt; H-&gt;Elements[Child]) \n           Child++;     \n         if ( LastElement &gt; H-&gt;Elements[ Child ] )   /* Percolate one level */ \n           H-&gt;Elements[ i ] = H-&gt;Elements[ Child ]; \n         else     break;   /* find the proper position */\n    } \n    H-&gt;Elements[ i ] = LastElement; \n    return  MinElement; \n}\n</code></pre></li> </ul>"},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/8/#c8","title":"C8 \u5e76\u67e5\u96c6","text":"<ul> <li> <p>Union-by-Size  Always change the smaller tree. Let \\(T\\) be the tree created by union-by-size with N nodes,then \\(height(T)\\leq log_2N+1\\)</p> </li> <li> <p>Relation <code>~</code> means \\(equivalence\\ relation\\) over \\(S\\), iff it's \\(symmetric\\), \\(reflextive\\) and \\(transitive\\) over \\(S\\).</p> </li> <li><code>symmetric</code> \u5bf9\u79f0\u6027(\\(\\forall a\\in S,a\\ R\\ a\\))  <code>reflexive</code> \u81ea\u53cd\u6027(\\(a\\ R\\ b \\Leftrightarrow b\\ R\\ a\\))  <code>transitive</code> \u4f20\u9012\u6027(\\(a\\ R\\ b,b\\ R\\ c\\Rightarrow b\\ R\\ c\\))</li> <li>Path Compression\u793a\u4f8b\u4ee3\u7801 C<pre><code>SetType  Find ( ElementType  X, DisjSet  S )\n{\n    if ( S[ X ] &lt;= 0 )    return  X;\n    else    return  S[ X ] = Find( S[ X ], S );\n}\nSetType  Find ( ElementType  X, DisjSet  S )\n{   \n    ElementType  root,  trail,  lead;\n    for ( root = X; S[ root ] &gt; 0; root = S[ root ] );  /* find the root */\n    for ( trail = X; trail != root; trail = lead ) {\n       lead = S[ trail ] ;   \n       S[ trail ] = root ;   \n    }  \n    return  root ;\n}\n</code></pre></li> </ul>"},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/hui/","title":"None","text":""},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/introduce/","title":"None","text":""},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/%E5%A4%8D%E4%B9%A0%E6%B3%A8%E6%84%8F%E7%82%B9/","title":"\u590d\u4e60\u91cd\u70b9","text":""},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/%E5%A4%8D%E4%B9%A0%E6%B3%A8%E6%84%8F%E7%82%B9/#_2","title":"\u77e5\u8bc6","text":"<ul> <li>hashing</li> <li>sort</li> <li>network flow</li> <li>graph</li> <li>tree</li> </ul>"},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/%E5%A4%8D%E4%B9%A0%E6%B3%A8%E6%84%8F%E7%82%B9/#_3","title":"\u4ee3\u7801","text":"<ul> <li>sort</li> <li>BFS,DFS</li> <li>heap</li> <li>BST</li> <li>dijkstra</li> <li>disjoint</li> <li>insertion sort</li> </ul>"},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/%E5%A4%8D%E4%B9%A0%E6%B3%A8%E6%84%8F%E7%82%B9/#_4","title":"\u5386\u5e74\u5377\u4e2d\u7684\u77e5\u8bc6\u70b9","text":""},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/%E5%A4%8D%E4%B9%A0%E6%B3%A8%E6%84%8F%E7%82%B9/#15-16-autumn-winter","title":"15-16 Autumn-Winter","text":"<ul> <li>merge run?</li> <li>is a sorting algorithm stable?</li> <li>do one BFS visit all vertices?</li> <li>the time complexity to compute Fibonacci</li> <li>\\(10^6\\) 1-digit number?</li> <li>LSD radix sort?</li> <li>in hashing, what key, hash value and collision is. Collision is Two elements with different keys share the same hash value.</li> <li>how to check cycle in a graph.</li> <li>the methods to sovle collision?</li> <li>The DFS of adjacency lists has order by the links.</li> </ul>"},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/%E5%A4%8D%E4%B9%A0%E6%B3%A8%E6%84%8F%E7%82%B9/#16-17-autumn-winter","title":"16-17 Autumn-Winter","text":"<ul> <li>which sort need extra space? how much?</li> <li>the best sort based on comparison is?</li> <li>when can quadratic probing be successful?</li> <li>negative-cost edge won't cause infinity loop in dijkstra.</li> <li>when to use heap in dijkstra?</li> </ul>"},{"location":"CS/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/Ch1_AVLtree/","title":"Ch1_AVLtree","text":"C++<pre><code>AVLtree right_rotation(AVLtree head)\n{\n    AVLtree y=head-&gt;left-&gt;right,ans=head-&gt;left;\n    head-&gt;left-&gt;right=head;\n    head-&gt;left=y;\n    return ans;\n}\n</code></pre> <p> What will happen when the BF of <code>B</code> is -1 in the first tree.</p> <p>\u5c1d\u8bd5\u5b9e\u73b0\u56db\u79cd\u65cb\u8f6c</p>"},{"location":"CS/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/introduce/","title":"introduce","text":""},{"location":"CS/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/introduce/#_1","title":"\u4e00\u4e9b\u94fe\u63a5","text":"<p>ADS Homework Review</p> <p>isshikih Note</p>"},{"location":"CS/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/introduce/#_2","title":"\u672c\u8bfe\u7a0b\u7684\u611f\u53d7\u5efa\u8bae\u6536\u96c6","text":""},{"location":"%E9%80%9A%E8%AF%86/%E5%88%9B%E4%B8%9A%E5%90%AF%E7%A8%8B/","title":"\u521b\u4e1a\u542f\u7a0b","text":"<p>\u7ebf\u4e0a\u6388\u8bfe\uff1a\u89c2\u770b\u89c6\u9891\uff0c\u53c2\u52a0\u8ba8\u8bba\u3001\u6d4b\u8bd5\u548c\u4f5c\u4e1a</p> <p>\u7ebf\u4e0a\u5b66\u4e60\u7a7a\u95f4\uff1azju.yuketang.cn</p> <p>\u8bfe\u7a0b\u5b66\u4e60\u65f6\u95f4\uff1a4.22-6.17 6.17\u665a23\uff1a59\u5e73\u53f0\u5173\u95ed\uff01\uff01</p> <p>\u6559\u6750\uff1a\u300a\u521b\u4e1a\u7ba1\u7406\u5b66\u300b\u7b2c\u4e8c\u7248</p>"},{"location":"%E9%80%9A%E8%AF%86/%E5%88%9B%E4%B8%9A%E5%90%AF%E7%A8%8B/#_2","title":"\u6210\u7ee9\u6784\u6210","text":"<ul> <li><code>20%</code> \u8bb2\u5ea7\uff1a\u6bcf\u5468\u4e94\u665a6\uff1a50-8\uff1a50\uff0c\u6709\u7ebf\u4e0a\u76f4\u64ad\u3002\u81f3\u5c11\u9009\u62e9\u4e24\u6b21\u64b0\u5199\u4e00\u7bc7\u4e0d\u5c11\u4e8e2000\u5b57\u7684\u89c2\u540e\u611f\u3002</li> <li><code>40%</code> \u7ebf\u4e0a\u5b66\u4e60\uff1a\u89c2\u770b\u89c6\u9891<code>30%</code>\uff1b\u6d4b\u8bd5<code>20%</code>\uff1b\u8ba8\u8bba<code>20%</code>\uff1b\u5927\u4f5c\u4e1a<code>30%</code></li> <li><code>40%</code> \u671f\u672b\u8003\uff1a1-7\u7ae0\uff0c\u9009\u62e925\u989850\u5206\uff0c\u5224\u65ad15\u989830\u5206\uff0c\u6750\u6599\u5206\u67901\u989820\u5206</li> </ul>"}]}