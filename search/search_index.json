{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>what about now?</code></li> </ul> <p>\\(a_i=b^3\\) \\(m_k+33=z\\)</p>"},{"location":"#project-layout","title":"Project layout","text":"Text Only<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"test/","title":"Hei!!","text":"<p>I'd like to have s test. This is really awesome! Have some change. \\(a_i=b^3\\) Do you have </p> <p>\\(m_k+33=z\\)</p> <p>? \u6765\u70b9\u4e2d\u6587 Go</p> C++<pre><code>double total_distance(const vector&lt;int&gt;&amp; path)                  //total_distance\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u67d0\u6761\u8def\u5f84\u7684\u957f\u5ea6\n{\n    double total=0;\n    int i;\n    for(i=0;i&lt;path.size()-1;i++)\n        total+=city_distance[path[i]][path[i+1]];               //\u4ecepath\u4e2d\u53d6\u51fa\u5f53\u524d\u57ce\u5e02\u548c\u4e0b\u4e00\u4e2a\u57ce\u5e02\uff0c\u5229\u7528city_distance\u67e5\u8be2\u8ddd\u79bb\n    total+=city_distance[path[i]][path[0]];                     //\u56de\u5230\u8d77\u70b9\n    return total;\n}\n</code></pre>"},{"location":"CS/C/none/","title":"nothing","text":""},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/8/","title":"\u4e00\u4e9b\u9700\u8981\u8bb0\u7684\u5b9a\u7406","text":""},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/8/#c5","title":"C5 \u6811","text":"<ul> <li>\u666e\u901a\u6811\u8f6c\u4e3a\u4e8c\u53c9\u6811\uff0c\u5176\u5b9e\u662f\u5c06\u6570\u7684\u7ed3\u6784\u5b9a\u4e49\u4e3aFirstChild-NextSibling\u7684\u5f62\u5f0f\u3002\u5728\u8fd9\u6837\u7684\u60c5\u51b5\u4e0b\uff0c\u666e\u901a\u6811\u7684\u540e\u5e8f\u904d\u5386\u5c31\u662f\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\u3002  postorder of T: <code>KLEFBGCMHIJDA</code>    inorder of BT: <code>KLEFBGCMHIJDA</code></li> <li>\u7ebf\u7d22\u4e8c\u53c9\u6811\u7528\u7a7a\u7684\u5de6\u8282\u70b9\u8bb0\u5f55\u524d\u9a71\uff0c\u7a7a\u7684\u53f3\u8282\u70b9\u8bb0\u5f55\u540e\u7ee7\uff0c\u6709\u6548\u5730\u8282\u7701\u4e86\u7a7a\u95f4\u3002\u524d\u9a71\u4e0e\u540e\u7ee7\u7531\u904d\u5386\u65b9\u5f0f\u51b3\u5b9a\u3002\u5982\u56fe\u4e2d\u7684\u7ebf\u7d22\u4e8c\u53c9\u6811\u91c7\u53d6\u4e2d\u5e8f\u904d\u5386\u3002 </li> </ul>"},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/8/#c6","title":"C6 \u4e8c\u53c9\u6811\uff0c\u4e8c\u53c9\u641c\u7d22\u6811","text":"<ul> <li>\u63d2\u5165(insert)\uff1a\u82e5\u4e3a\u7a7a\u6811\uff0c\u5219\u76f4\u63a5\u521b\u5efa\u4e00\u4e2a\u8282\u70b9\uff0c\u5426\u5219\u5219\u4e00\u76f4\u4e0e\u5f53\u524d\u8282\u70b9\u6bd4\u8f83\uff0c\u82e5\u4e0b\u4e00\u4e2a\u8282\u70b9\u4e3a\u7a7a\uff0c\u8bf4\u660e\u627e\u5230\u4e86\u5e94\u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\u3002 C<pre><code>SearchTree  Insert( ElementType X, SearchTree T ) \n{ \n    if ( T == NULL ) \n    { /* Create and return a one-node tree */ \n    T = malloc( sizeof( struct TreeNode ) ); \n    if ( T == NULL ) \n       FatalError( \"Out of space!!!\" ); \n    else { \n       T-&gt;Element = X; \n       T-&gt;Left = T-&gt;Right = NULL; } \n    }  \n    else  /* If there is a tree */\n    if ( X &lt; T-&gt;Element ) \n       T-&gt;Left = Insert( X, T-&gt;Left ); \n    else \n       if ( X &gt; T-&gt;Element ) \n          T-&gt;Right = Insert( X, T-&gt;Right ); \n       /* Else X is in the tree already; we'll do nothing */ \n    return  T;  \n}\n</code></pre></li> <li>\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u5143\u7d20\u96c6\uff0c\u5176\u6784\u5efa\u51fa\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5f62\u72b6\u53d6\u51b3\u4e8e\u63d2\u5165\u5143\u7d20\u7684\u987a\u5e8f\u3002</li> <li>\u5220\u9664(delete)\uff1a\u5f53\u6211\u4eec\u8981\u5220\u9664\u4e00\u4e2a\u8282\u70b9<ul> <li>\u5982\u679c\u5176\u5ea6\u4e3a0\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5220\u53bb\u8fd9\u4e2a\u8282\u70b9\uff1b</li> <li>\u5982\u679c\u5176\u5ea6\u4e3a1\uff0c\u6211\u4eec\u7528\u5176\u552f\u4e00\u7684\u5b50\u8282\u70b9\u8986\u76d6\u5f53\u524d\u8282\u70b9\uff1b</li> <li>\u5982\u679c\u5176\u5ea6\u4e3a2\uff0c\u6211\u4eec\u4e00\u822c\u6709\u4e24\u79cd\u9009\u62e9\uff1a<ol> <li>\u4ece\u5f53\u524d\u8282\u70b9\u7684\u5de6\u5b50\u6811\u9009\u62e9\u4e00\u4e2a\u6700\u5927\u7684\u653e\u5728\u5f53\u524d\u8282\u70b9</li> <li>\u4ece\u5f53\u524d\u8282\u70b9\u7684\u53f3\u5b50\u6811\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u653e\u5728\u5f53\u524d\u8282\u70b9 \u5176\u4e2d\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c\u6211\u4eec\u9009\u62e9\u7684\u8282\u70b9\u7684\u5ea6\u6700\u591a\u662f1\uff0c\u8fd9\u4f7f\u5f97\u5220\u9664\u64cd\u4f5c\u662f\u6709\u7a77\u7684\u3002 </li> </ol> </li> </ul> </li> <li>C<pre><code>SearchTree  Delete( ElementType X, SearchTree T ) \n{    Position  TmpCell; \n      if ( T == NULL )   Error( \"Element not found\" ); \n      else  if ( X &lt; T-&gt;Element )  /* Go left */ \n        T-&gt;Left = Delete( X, T-&gt;Left ); \n               else  if ( X &gt; T-&gt;Element )  /* Go right */ \n               T-&gt;Right = Delete( X, T-&gt;Right ); \n             else  /* Found element to be deleted */ \n               if ( T-&gt;Left &amp;&amp; T-&gt;Right ) {  /* Two children */ \n                   /* Replace with smallest in right subtree */ \n                   TmpCell = FindMin( T-&gt;Right ); \n                   T-&gt;Element = TmpCell-&gt;Element; \n                   T-&gt;Right = Delete( T-&gt;Element, T-&gt;Right );  } /* End if */\n               else {  /* One or zero child */ \n                   TmpCell = T; \n                   if ( T-&gt;Left == NULL ) /* Also handles 0 child */ \n                 T = T-&gt;Right; \n                   else  if ( T-&gt;Right == NULL )  T = T-&gt;Left; \n                   free( TmpCell );  } \n      return  T; \n}\n</code></pre></li> <li>\u61d2\u60f0\u5220\u9664(lazy delete)\uff1a\u5bf9\u4e8e\u5220\u9664\u6b21\u6570\u4e0d\u662f\u5f88\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u5b9e\u9645\u91ca\u653e\u4e00\u4e2a\u8282\u70b9\u7684\u5185\u5b58\uff0c\u800c\u662f\u589e\u52a0\u4e00\u4e2a\u5e03\u5c14\u53d8\u91cf\u6765\u8868\u793a\u5f53\u524d\u8282\u70b9\u662f\u5426\u88ab\u5220\u9664\u3002\u6211\u4eec\u53ef\u4ee5\u6807\u8bb0\u88ab\u5220\u9664\u7684\u8282\u70b9\uff0c\u5728\u8fdb\u884c\u904d\u5386\u7b49\u64cd\u4f5c\u65f6\u8df3\u8fc7\u8be5\u8282\u70b9\u3002\u5f53\u6211\u4eec\u8981\u91cd\u65b0\u63d2\u5165\u5f53\u524d\u5143\u7d20\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u4e0d\u91cd\u65b0\u5206\u914d\u5185\u5b58\uff0c\u800c\u662f\u76f4\u63a5\u4fee\u6539\u5e03\u5c14\u53d8\u91cf\u3002 \u61d2\u60f0\u5220\u9664\u9002\u7528\u4e8e\u5220\u9664\u6b21\u6570\u4e0d\u90a3\u4e48\u591a\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u88ab\u6807\u8bb0\u5220\u9664\u7684\u8282\u70b9\u8fc7\u591a\uff08\u8d85\u8fc7\u4e00\u534a\uff09\uff0c\u4f1a\u5bfc\u81f4\u5176\u4ed6\u64cd\u4f5c\u7684\u8868\u73b0\u5f88\u7cdf\u7cd5\u3002</li> <li>\u6298\u534a\u67e5\u627e\u6811(decision tree)\uff1a\u6298\u534a\u67e5\u627e\u6811\u5176\u5b9e\u662f\u6839\u636e\u4e8c\u5206\u67e5\u627e\u7684\u89c4\u5219\u5b9a\u4e49\u5728\u4e8c\u53c9\u641c\u7d22\u6811\u4e0a\u3002\u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u6839\u636e\u4e2d\u5e8f\u904d\u5386\u5c06\u6bcf\u4e2a\u8282\u70b9\u4ece1\u5f00\u59cb\u7f16\u53f7\uff0c\u4ee5\u6700\u5927\u7f16\u53f7\u4e0e\u6700\u5c0f\u7f16\u53f7\u7684\u548c\u9664\u4ee52\u4f5c\u4e3a\u4e2d\u503c\\(mid\\)\u3002\u5176\u4e2d\uff0c\u5bf9\u4e8e\u548c\u4e3a\u5947\u6570\u7684\u60c5\u51b5\uff0c\u9664\u4ee52\u6d89\u53ca\u5230\u53d6\u6574\u95ee\u9898\uff0c\u5728\u4e00\u9897\u6298\u534a\u67e5\u627e\u6811\u4e2d\uff0c\u53d6\u6574\u65b9\u5f0f\u662f\u7edf\u4e00\u7684\u3002</li> <li>\u4f8b\u9898  \u7f16\u53f7\u540e\u6709  \u5bf9\u4e8eB\uff1a4 5\uff0c7 8 \u4e0d\u7b26\u3002  \u5bf9\u4e8eC\uff1a3 4\uff0c6 7 \u4e0d\u7b26\u3002  \u5bf9\u4e8eD\uff1a9 10\uff0c1 10 \u4e0d\u7b26</li> </ul>"},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/8/#c8","title":"C8 \u5e76\u67e5\u96c6","text":"<ul> <li> <p>Union-by-Size  Always change the smaller tree. Let \\(T\\) be the tree created by union-by-size with N nodes,then \\(height(T)\\leq log_2N+1\\)</p> </li> <li> <p>Relation <code>~</code> means \\(equivalence\\ relation\\) over \\(S\\), iff it's \\(symmetric\\), \\(reflextive\\) and \\(transitive\\) over \\(S\\).</p> </li> <li><code>symmetric</code> \u5bf9\u79f0\u6027(\\(\\forall a\\in S,a\\ R\\ a\\))  <code>reflexive</code> \u81ea\u53cd\u6027(\\(a\\ R\\ b \\Leftrightarrow b\\ R\\ a\\))  <code>transitive</code> \u4f20\u9012\u6027(\\(a\\ R\\ b,b\\ R\\ c\\Rightarrow b\\ R\\ c\\))</li> <li>Path Compression\u793a\u4f8b\u4ee3\u7801 C<pre><code>SetType  Find ( ElementType  X, DisjSet  S )\n{\n    if ( S[ X ] &lt;= 0 )    return  X;\n    else    return  S[ X ] = Find( S[ X ], S );\n}\nSetType  Find ( ElementType  X, DisjSet  S )\n{   \n    ElementType  root,  trail,  lead;\n    for ( root = X; S[ root ] &gt; 0; root = S[ root ] );  /* find the root */\n    for ( trail = X; trail != root; trail = lead ) {\n       lead = S[ trail ] ;   \n       S[ trail ] = root ;   \n    }  \n    return  root ;\n}\n</code></pre></li> </ul>"},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/hui/","title":"None","text":""},{"location":"CS/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/introduce/","title":"None","text":""}]}